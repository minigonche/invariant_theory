-- Script for final project of Invariant Theory
-- Authors: Daniel De Roux
			Felipe Gonzalez Casabianca

-- Our field will be the rational numbers, since fractions are only implemented
--	for ZZ, QQ and finite fields
-- WARNING! For the methods: createTMatrix, molienTerm and molienTeo, this variable cannot
--			be overwritten, our else we cannot add the final polinomial fractions


-- ## FUNCTIONS ## --
-- Function that constructs an n x n  identity matrix with the variable 't', corresponding to the ring 
--		R = QQ[t] declared before. (I'm sure there is an easier way to do this but I could not find it)
-- Returns: a tuple
--			1. An n x n identity matrix with the variable 't' on the diagonal
--			2. The t variable

createTMatrix = n -> (
	Rtempt := QQ[t];
	-- Constructs using a double loop
    w := t;
	m := for j from 1 to n list
		(for i from 1 to n  list w 
			do if i > j then w = 0 
        	else if i == j - 1 then w = t 
        	else w = 0);
    {matrix(m),t}
);


--- function that returns all the matrices of the representation of a group given the 
--- atrix representantion of its generators and the size of the group.
--- Note: This method is pure brute force.
---Inputs: matrixListGenerators (list): list with the matrix representation of the generators of 
--										the group.
--         n: (integer>0): size of the group.
getGroup = (matrixListGenerators,n)-> (
	-- BruteForce
	response := matrixListGenerators; -- Copies generators
	while length(response) < n do (
		size := length(response);
		for i from 0 to length(response) - 1 do (
			tempMatrix = response_i;
			k := length(response);
			for j from 0 to k - 1 do (
				response = append(response, tempMatrix*response_j);
			);
			response = unique(response);
			if length(response) >= n then return(response);
		);
		if size == length(response) then print("Group size cannot be reached!");
		if size == length(response) then return(response);
	);
	response
);



-- Function that returns the fraction part of the Invariant's Hilbert Series, using Molien.
-- Inputs: A (matrix): corresponds to the image of a given "g" inside the Group under rho.
--                     the matrix need to be over the complex filed
-- Returns: 1/(det(I - t*A))

molienTerm = (A, T) -> ( 
	I := id_(QQ^(numgens target A)); -- Identity Matrix		
	final := I - T*A;
	1/det(final)
);



-- Function that receives a list of matrices and calculates the Hilbert Series of the invariant ring
--	using the Molien Theorem
-- Inputs: matrixList (List of Matrices): In order for this method to work, each  matrix needs to be 
-- over QQ 
-- Returns: A tuple:
--			1. Hilbert Series (using Molien Theorem)
--			2. The 't' variable for the series

molienTeo = matrixList -> (
	n := length(matrixList); --Number of matrices
	temp := createTMatrix(numgens target matrixList_0); 	
	T := temp_0; -- Diagonal t Matrix 
	t := temp_1; -- variable
	-- first saves each term on a list
	all := for i from 0 to (n-1) list molienTerm(matrixList_i, T);
	HS := sum(all)/n;
	{HS,t}
);


-- AUXILIARY
-- Auxiliary method for calculating list of options given a matrix and a list of variables
-- Inputs:  A (matrix) matrix that will be applyed to the variables
--			varList (list of variables) the list of varaibles
-- Returns: list of options representating the effect of the matrix A over the variables varList

applyMatrixToVars = (A, varList) -> (	
	varMatrix := transpose(matrix({varList})); -- Verival vector of variables
	result := A*varMatrix; -- Aplies transformation
	-- Assignes options
	listOptions := for i from 0 to (length(varList) - 1) list varList_i => result_0_i ;
	listOptions
);


-- Function that calculates the reynolds operator for a given polinomial.
-- Inputs:  f (polinomial) a polinomial expression.
--			varList (list of varibles) the list of variablreynoldses. They must be the same variables of f.
--			matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
--										   element of the Group and rho its representation.
-- Returns: polinomial corresponding to the image of the reynolds operator

reynoldsOperator = (f, varList, matrixList) -> (
	n := length(matrixList); --Number of matrices
	-- Calculates the list of options options for each matrix
	allOptions := for i from 0 to (n-1) list applyMatrixToVars(matrixList_i, varList);
	allApplications := for i from 0 to (n-1) list sub(f, allOptions_i);
	finalPol := sum(allApplications)/n;
	finalPol
);

-- Function that calculates the reynolds operator for a list of given polinomials.
-- Inputs:  listOfPolynomials (list of polinomials) a list of polinomial expressions.
--			varList (list of varibles) the list of variables. They must be the same variables of f.
--			matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
--										   element of the Group and rho its representation.
-- Returns: list of polinomials corresponding to the image of the reynolds operator

reynoldsOperatorList = (listOfPolynomials, varList, matrixList) -> (
	totPol := length(listOfPolynomials); -- Number of polynomials
	result:= for i from 0 to (totPol-1) list reynoldsOperator(listOfPolynomials_i, varList, matrixList);
	result
);


-- Function that given a set of matrices, constructs a list of invariant polynomials for a given degree
-- using the reynolds operator. This method assumes that all matrices are square, have rational 
-- entries, are invertable and have the same dimensions. We also assume that there is a matrix for
-- each element of the underlying group
-- Inputs:  polyRing (Ring of polynomials): Ring of polinomials that the matrices act on
--			matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
-- 						element of the Group and rho its representation.
--			d (integer > 0): desired dimension
-- Returns: invariant polinomials of degree d

getInvariantPolinomialsOfDegree = (polyRing, matrixList, d) -> (
	varList := gens(polyRing); -- list of variables
	gradedBasis := flatten(entries(basis(d,polyRing)));
	invPoly := unique(reynoldsOperatorList(gradedBasis, varList, matrixList));
	invPoly
);

-- Given a set of matrices constructs a corresponding ring using 'z' as variables
-- Inputs: matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
-- 						element of the Group and rho its representation.
-- Returns: ring of polinomials that the matrices will act on

getRingOfPolynomials = matrixList -> (
	n := numgens target matrixList_0;
	polyRing := QQ[z_1..z_n];
	polyRing
);



-- AUXILIARY
-- Auxiliary method that replaces all variables in all the polynomials in the given list with 
-- new ones.
-- Inputs:  polinomialList (list of polinomials): List of polinomials in the old variables
--			oldVar (list of variables): list of all the old variables. Must be the same size as
--										new variables
--			newVar (list of variables): list of all the new variables. Must be the same size as
--										old variables

replaceVariables = (polinomialList, oldVar, newVar) -> (
	numVar := length(oldVar); -- Number of variables
	numPol := length(polinomialList); -- Number of polynomials
	-- Creates replacement options
	replaceOptions := for i from 0 to numVar - 1 list oldVar_i => newVar_i;
	-- Replaces polynomials
	replacedPolynomials := for i from 0 to numPol - 1 list sub(polinomialList_i, replaceOptions);
	replacedPolynomials
);

-- Function that given a set of linearly independet polinomials f1,..,fm in the variables x_1,..,x_n
-- computes QQ[f1,..,fm]
-- Inputs: varList (list of variables) the list of variables of the polinomials (cannot be x_i or y_i)
--		   polinomialList (list of polinomials): List of linearly indepent polinomials that 
--				  		  generate all the invariants of degree less than a given d.
-- Returns: A quotient ring that is isomorphic to QQ[f1,...,fm]

getQuotientRing = (varList, polinomialList) -> (
  m := length(polinomialList); -- Number of polinomials
  n := length(varList); -- number of variables
  grados := apply(polinomialList,degree);
  Rtemp:= QQ[y_1..y_m,Degrees=>grados];
  Ltemp:= QQ[x_1..x_n]; -- New ring of polinomials
  -- Selects new variables for polynomials (x_1..x_m)
  newVar := gens(Ltemp);
  newPol := replaceVariables(polinomialList, varList, newVar);
  Phi:= map(Ltemp,Rtemp,newPol); -- Transformation
  quotientRing := coimage Phi;
  quotientRing
);


-- Function that returns the ring of invariants given a matrixlist
-- Inputs: matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
--										   element of the Group and rho its representation.
-- Returns: Ring of invariants

getInvariantRepresentation = matrixList -> (
	-- Molien series of the matrix list
	temp := molienTeo(matrixList);
	molienSeries := temp_0; -- The series
	molienVar := temp_1; -- The variable
	-- Gets Invariant polinomials
	polyRing := getRingOfPolynomials(matrixList);
	polyVars := gens(polyRing); -- Variables of the invariant polynomials
	-- STARTS THE ITERATION OF THE INVARIANT POLINOMIALS
	i := 0; -- iterator
	polinomialList := getInvariantPolinomialsOfDegree(polyRing, matrixList, 1) ; -- Starts list with polynomials of degree 1
	flag := 0; -- The while flag
	qr := null; -- The quotient ring of invariants
	while flag == 0 do (	
		i = i + 1; -- Advances 
		if i > length(matrixList) then error("The dimension of invariant polynomials should not excced the size of the group");
		-- Gets the quotient ring corresponding to the polynomials
		qr = getQuotientRing(polyVars, polinomialList);
		-- CHECKS IF THE HS IS EQUAL TO MOLIEN SERIES
		-- Gets the polinomial of the hilbert series
		polHil = reduceHilbert(hilbertSeries(qr));
		use ring numerator polHil; -- No Fucking Idea
		polHil = value(sub(polHil, T => molienVar)); -- Converts to fraction of 't'
		if (polHil - molienSeries) != 0 then polinomialList = flatten({polinomialList, 
		getInvariantPolinomialsOfDegree(polyRing, matrixList, i + 1)})
		else flag = 1;
		if flag == 0 then print("Next Iteration");		
		);
	qr	
);


-- Function that returns the set of matrices for S2
-- Returns: List with the matrix representation of S2

getS2 = () -> (
	Ae := matrix(QQ,{{1,0},{0,1}});
	A12 := matrix(QQ,{{0,1},{1,0}});	
	matrixList := {Ae, A12};
	matrixList
);	


-- Function that generates the symetric group Sn. 
-- Uses theorem 2.5 of http://www.math.uconn.edu/~kconrad/blurbs/grouptheory/genset.pdf
-- Inputs: n (integer > 0): size of the symetric group
-- Returns: List with the matrix representation of Sn
getSn = (n) -> (
	if n == 2 then return getS2();
	w := 1;
	vecList := for j from 1 to n list
		(for i from 1 to n list w 
			do if i > j then w = 0 
        	else if i == j - 1 then w = 1 
        	else w = 0);
	A := matrix(QQ,append(for i from 1 to n-1 list vecList_i, vecList_0));
	BList := new MutableList from vecList;
	BList#0 = vecList#1;
	BList#1 = vecList#0;
	B := matrix(QQ, (for i from 0 to n - 1 list BList#i));
	getGroup({A,B}, n!)
);







