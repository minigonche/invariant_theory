-- Script for final project of Invariant Theory
-- Authors: Daniel De Roux
			Felipe Gonzalez 

-- Our field will be the rational numbers, since fractions are only implemented
--	for ZZ, QQ and finite fields
-- WARNING! For the methods: createTMatrix, molienTerm and molienTeo, this variable cannot
--			be overwritten, our else we cannot add the final polinomial fractions


-- ## FUNCTIONS ## --
-- Function that constructs an n x n  identity matrix with the variable 't', corresponding to the ring 
--		R = QQ[t] declared before. (I'm sure there is an easier way to do this but I could not find it)
-- Returns: a tuple
--			1. An n x n identity matrix with the variable 't' on the diagonal
--			2. The t variable

createTMatrix = n -> (
	Rtempt := QQ[t];
	-- Constructs using a double loop
    w := t;
	m := for j from 1 to n list
		(for i from 1 to n  list w 
			do if i > j then w = 0 
        	else if i == j - 1 then w = t 
        	else w = 0);
    {matrix(m),t}
);



-- Function that returns the fraction part of the Invariant's Hilbert Series, using Molien.
-- Inputs: A (matrix): corresponds to the image of a given "g" inside the Group under rho.
--                     the matrix need to be over the complex filed
-- Returns: 1/(det(I - t*A))

molienTerm = (A, T) -> ( 
	I := id_(QQ^(numgens target A)); -- Identity Matrix		
	final := I - T*A;
	1/det(final)
);



-- Function that receives a list of matrices and calculates the Hilbert Series of the invariant ring
--	using the Molien Theorem
-- Inputs: matrixList (List of Matrices): In order for this method to work, each  matrix needs to be 
-- over QQ 
-- Returns: A tuple:
--			1. Hilbert Series (using Molien Theorem)
--			2. The 't' variable for the series

molienTeo = matrixList -> (
	n := length(matrixList); --Number of matrices
	temp := createTMatrix(numgens target matrixList_0); 	
	T := temp_0; -- Diagonal t Matrix 
	t := temp_1; -- variable
	-- first saves each term on a list
	all := for i from 0 to (n-1) list molienTerm(matrixList_i, T);
	HS := sum(all)/n;
	{HS,t}
);


-- AUXILIARY
-- Auxiliary method for calculating list of options given a matrix and a list of variables
-- Inputs:  A (matrix) matrix that will be applyed to the variables
--			varList (list of variables) the list of varaibles
-- Returns: list of options representating the effect of the matrix A over the variables varList

applyMatrixToVars = (A, varList) -> (	
	varMatrix := transpose(matrix({varList})); -- Verival vector of variables
	result := A*varMatrix; -- Aplies transformation
	-- Assignes options
	listOptions := for i from 0 to (length(varList) - 1) list varList_i => result_0_i ;
	listOptions
);


-- Function that calculates the Rayleigh operator for a given polinomial.
-- Inputs:  f (polinomial) a polinomial expression.
--			varList (list of varibles) the list of variables. They must be the same variables of f.
--			matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
--										   element of the Group and rho its representation.
-- Returns: polinomial corresponding to the image of the Rayleigh operator

rayleighOperator = (f, varList, matrixList) -> (
	n := length(matrixList); --Number of matrices
	-- Calculates the inverse of each matrix
	inverseList := for i from 0 to (n-1) list inverse(matrixList_i); 
	-- Calculates the list of options options for each matrix
	allOptions := for i from 0 to (n-1) list applyMatrixToVars(matrixList_i, varList);
	allApplications := for i from 0 to (n-1) list sub(f, allOptions_i);
	finalPol := sum(allApplications)/n;
	finalPol
);

-- Function that calculates the Rayleigh operator for a list of given polinomials.
-- Inputs:  listOfPolynomials (list of polinomials) a list of polinomial expressions.
--			varList (list of varibles) the list of variables. They must be the same variables of f.
--			matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
--										   element of the Group and rho its representation.
-- Returns: list of polinomials corresponding to the image of the Rayleigh operator

rayleighOperatorList = (listOfPolynomials, varList, matrixList) -> (
	totPol := length(listOfPolynomials); -- Number of polynomials
	result:= for i from 0 to (totPol-1) list rayleighOperator(listOfPolynomials_i, varList, matrixList);
	result
);



-- Function that that constructs a graded polyomial ring with n free variables and returns a list 
-- with the basis for each degree of the graded ring until d. The ring will have variables x_i so the 
-- y should be unused. 
-- Inputs: 	n (integer > 0) the number of variables the ring will have
--			d (inetger > 0) the mas number of dimension for the basis
-- Returns: a tuple:
--			1. The ring of polynomials
--			2. A list who's ith entry correspond to the set of polynomials of degree i, that form a
-- 			   basis for ith coordinate of the graded ring.

getGradedBasis = (n, d) -> (
	RTemp := QQ[z_1..z_n];
	basisList := for i from 1 to d list flatten(entries(basis(i,RTemp)));
	result = { RTemp , basisList};
	result
);



-- Function that given a set of matrices, constructs a list of invariant polynomials for each degree, 
-- using the Rayleigh operator. This method assumes that all matrices are square, have rational 
-- entries, are invertable and have the same dimensions. We also assume that there is a matrix for
-- each element of the underlying group
-- Inputs:  matrixList (List of Matrices): list of matrices corresponding to rho(g), where g is an 
-- 						element of the Group and rho its representation.
-- 			flat (number in {0,1}): indicates if the list should be flatten or not
-- Returns: a tuple:
--			1. The list of variables of the polynomials (are of the form z_1 .. z_n)
--			2. Depends of the parameter flat. If flat = 0 then: List of oplynoimals where the entry i 
-- 			   correspond to a list with invariant polinomials of degree i. Else if flat = 1 then: 
--			   List of invariant polinomials

getInvariantPolinomials = (matrixList, flat) -> (
	-- Extracts the dimension of the gradient ring (number of columns of the matrices)
	n := numgens target matrixList_0;
	d := length(matrixList); -- Size of the group
	temp := getGradedBasis(n,d);
	RTemp:= temp_0; -- The ring of polinmials
	varList := gens(RTemp); -- list of variables
	gradedBasis := temp_1; -- The basis for each grade of the ring
	polyTemp := for i from 0 to (d-1) list unique(rayleighOperatorList(gradedBasis_i, varList, matrixList));
	if flat == 1 then return({varList, flatten(polyTemp)});
	result := {varList, polyTemp};
	result
);			


-- AUXILIARY
-- Auxiliary method that replaces all variables in all the polynomials in the given list with 
-- new ones.
-- Inputs:  polinomialList (list of polinomials): List of polinomials in the old variables
--			oldVar (list of variables): list of all the old variables. Must be the same size as
--										new variables
--			newVar (list of variables): list of all the new variables. Must be the same size as
--										old variables

replaceVariables = (polinomialList, oldVar, newVar) -> (
	numVar := length(oldVar); -- Number of variables
	numPol := length(polinomialList); -- Number of polynomials
	-- Creates replacement options
	replaceOptions := for i from 0 to numVar - 1 list oldVar_i => newVar_i;
	-- Replaces polynomials
	replacedPolynomials := for i from 0 to numPol - 1 list sub(polinomialList_i, replaceOptions);
	replacedPolynomials
);

-- Function that given a set of linearly independet polinomials f1,..,fm in the variables x_1,..,x_n
-- computes QQ[f1,..,fm]
-- Inputs: varList (list of variables) the list of variables of the polinomials (cannot be x_i or y_i)
--		   polinomialList (list of polinomials): List of linearly indepent polinomials that 
--				  		  generate all the invariants of degree less than a given d.
-- Returns: A quotient ring that is isomorphic to QQ[f1,...,fm]

getQuotientRing = (varList, polinomialList) -> (
  m := length(polinomialList); -- Number of polinomials
  n := length(varList); -- number of variables
  grados := apply(polinomialList,degree);
  Rtemp:= QQ[y_1..y_m,Degrees=>grados];
  Ltemp:= QQ[x_1..x_n]; -- New ring of polinomials
  -- Selects new variables for polynomials (x_1..x_m)
  newVar := gens(Ltemp);
  newPol := replaceVariables(polinomialList, varList, newVar);
  Phi:= map(Ltemp,Rtemp,newPol); -- Transformation
  quotientRing := coimage Phi;
  quotientRing
);


-- Function that returns the ring of invariants given a matrixlist

getInvariantRepresentation = matrixList -> (
	-- Molien series of the matrix list
	temp := molienTeo(matrixList);
	molienSeries := temp_0; -- The series
	molienVar := temp_1; -- The variable
	-- Gets Invariant polinomials
	pTemp := getInvariantPolinomials(matrixList, 0);
	polyVars := pTemp_0; -- Variables of the invariant polynomials
	completePoly := pTemp_1; -- All the polynomials
	-- STARTS THE ITERATION OF THE INVARIANT POLINOMIALS
	i := 0; -- iterator
	polinomialList := completePoly_0; -- Starts list with one polynomial
	flag := 0; -- The while flag
	qr := null; -- The quotient ring of invariants
	while flag == 0 do (	
		i = i + 1; -- Advances 
		-- Gets the quotient ring corresponding to the polynomials
		qr = getQuotientRing(polyVars, polinomialList);
		-- CHECKS IF THE HS IS EQUAL TO MOLIEN SERIES
		-- Gets the polinomial of the hilbert series
		polHil = reduceHilbert(hilbertSeries(qr));
		use ring numerator polHil; -- No Fucking Idea
		polHil = value(sub(polHil, T => molienVar)); -- Converts to fraction of 't'
		if (polHil - molienSeries) != 0 then polinomialList = flatten({polinomialList, completePoly_i})
		else flag = 1;
		if flag == 0 then print("Next Iteration");
		);
	qr	
);

-- Function that returns the set of matrices for S3
-- Returns: List with the matrix representation of S3

getS3 = () -> (
	Ae := matrix(QQ,{{1,0,0},{0,1,0},{0,0,1}});
	A12 := matrix(QQ,{{0,1,0},{1,0,0},{0,0,1}});
	A13 := matrix(QQ,{{0,0,1},{0,1,0},{1,0,0}});
	A23 := matrix(QQ,{{1,0,0},{0,0,1},{0,1,0}});
	A123 := A12*A23;
	A132 := A13*A23;
	matrixList := {Ae, A12, A13, A23, A123, A132};
	matrixList
);


-- Function that returns the set of matrices for S2
-- Returns: List with the matrix representation of S2

getS2 = () -> (
	Ae := matrix(QQ,{{1,0},{0,1}});
	A12 := matrix(QQ,{{0,1},{1,0}});	
	matrixList := {Ae, A12};
	matrixList
);	



-- Ejemplo

matrixList = getS2();
pTemp = getInvariantPolinomials(matrixList, 1);
qr = getQuotientRing(pTemp_0, pTemp_1);
pol1 = reduceHilbert(hilbertSeries(qr))
molienTeo(matrixList)



-- MAURICIO

--Problema: Encontrar invariantes de un grado dado
l=10
kk=QQ[c_1..c_10]
R=kk[x_1..x_3]
F=map(R,R,{x_2,x_3,x_1})
G=map(R,R,{x_2,x_1,x_3})
B=basis(3,R)
B2 = flatten entries B
b = length(B2)
iterador = flatten entries vars(kk)
PG =sum apply(length(iterador), j-> iterador_j*B2_j)
A=coefficients(PG-F(PG))
B=coefficients(PG-G(PG))
B#1
A#1





